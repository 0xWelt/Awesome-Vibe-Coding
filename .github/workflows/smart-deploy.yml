name: Smart Build and Deploy Website

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.build-needed }}
      build-reason: ${{ steps.check.outputs.build-reason }}
      changed-files: ${{ steps.check.outputs.changed-files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤ËÆ∞ÂΩï‰ª•Êü•Êâæ‰∏ä‰∏ÄÊ¨°ÈÉ®ÁΩ≤

      - name: Check if build is needed
        id: check
        run: |
          # ÂÆö‰πâÈúÄË¶ÅÁõëÊéßÁöÑÊñá‰ª∂Ê®°Âºè
          PATTERNS="README.md|app/|components/|scripts/|package.json|package-lock.json|next.config.js|tsconfig.json|tailwind.config.js|.github/workflows/"

          # ÂÆö‰πâËØ¶ÁªÜÁöÑÊñá‰ª∂ÂàÜÁ±ª
          README_PATTERN="README.md"
          APP_PATTERN="^app/"
          COMPONENTS_PATTERN="^components/"
          SCRIPTS_PATTERN="^scripts/"
          CONFIG_PATTERN="(package\.json|package-lock\.json|next\.config\.js|tsconfig\.json|tailwind\.config\.js)"
          WORKFLOW_PATTERN="^\.github/workflows/"

          # Ëé∑Âèñ‰∏ä‰∏ÄÊ¨°ÊàêÂäüÈÉ®ÁΩ≤ÁöÑcommit SHA
          LAST_DEPLOYED_SHA=$(git log --oneline --grep="Deploy to GitHub Pages" -n 1 --format="%H" || echo "")

          if [ -z "$LAST_DEPLOYED_SHA" ]; then
            echo "üöÄ È¶ñÊ¨°ÊûÑÂª∫Ê£ÄÊµã"
            echo "build-reason=È¶ñÊ¨°ÊûÑÂª∫ - Êâæ‰∏çÂà∞‰πãÂâçÁöÑÈÉ®ÁΩ≤ËÆ∞ÂΩï" >> $GITHUB_OUTPUT
            echo "changed-files=ÊâÄÊúâÊñá‰ª∂ (È¶ñÊ¨°ÊûÑÂª∫)" >> $GITHUB_OUTPUT
            BUILD_NEEDED=true
          else
            echo "üìä ÂàÜÊûêËá™‰∏äÊ¨°ÈÉ®ÁΩ≤‰ª•Êù•ÁöÑÂèòÊõ¥ ($LAST_DEPLOYED_SHA ‚Üí HEAD)"
            echo "‰∏ä‰∏ÄÊ¨°ÈÉ®ÁΩ≤SHA: $LAST_DEPLOYED_SHA"
            
            # Ëé∑ÂèñÂèòÊõ¥ÁöÑÊñá‰ª∂ÂàóË°®
            CHANGED_FILES=$(git diff --name-only $LAST_DEPLOYED_SHA HEAD)
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "‚úÖ Ê≤°ÊúâÊñá‰ª∂ÂèòÊõ¥"
              echo "build-reason=Êó†Êñá‰ª∂ÂèòÊõ¥" >> $GITHUB_OUTPUT
              echo "changed-files=Êó†" >> $GITHUB_OUTPUT
              BUILD_NEEDED=false
            else
              echo "üìÅ Ê£ÄÊµãÂà∞ÁöÑÂèòÊõ¥Êñá‰ª∂:"
              echo "$CHANGED_FILES" | while read -r file; do
                echo "  - $file"
              done
              
              # ÂàÜÊûêÂåπÈÖçÁöÑÊñá‰ª∂
              MATCHING_FILES=""
              README_CHANGED=false
              APP_CHANGED=false
              COMPONENTS_CHANGED=false
              SCRIPTS_CHANGED=false
              CONFIG_CHANGED=false
              WORKFLOW_CHANGED=false
              
              while IFS= read -r file; do
                if echo "$file" | grep -qE "$README_PATTERN"; then
                  README_CHANGED=true
                  MATCHING_FILES="$MATCHING_FILES README"
                elif echo "$file" | grep -qE "$APP_PATTERN"; then
                  APP_CHANGED=true
                  MATCHING_FILES="$MATCHING_FILES APP"
                elif echo "$file" | grep -qE "$COMPONENTS_PATTERN"; then
                  COMPONENTS_CHANGED=true
                  MATCHING_FILES="$MATCHING_FILES COMPONENTS"
                elif echo "$file" | grep -qE "$SCRIPTS_PATTERN"; then
                  SCRIPTS_CHANGED=true
                  MATCHING_FILES="$MATCHING_FILES SCRIPTS"
                elif echo "$file" | grep -qE "$CONFIG_PATTERN"; then
                  CONFIG_CHANGED=true
                  MATCHING_FILES="$MATCHING_FILES CONFIG"
                elif echo "$file" | grep -qE "$WORKFLOW_PATTERN"; then
                  WORKFLOW_CHANGED=true
                  MATCHING_FILES="$MATCHING_FILES WORKFLOW"
                fi
              done <<< "$CHANGED_FILES"
              
              # ÊûÑÂª∫ËØ¶ÁªÜÂéüÂõ†
              REASON="Ê£ÄÊµãÂà∞ÂèòÊõ¥:"
              [ "$README_CHANGED" = true ] && REASON="$REASON README.md"
              [ "$APP_CHANGED" = true ] && REASON="$REASON Â∫îÁî®Êñá‰ª∂"
              [ "$COMPONENTS_CHANGED" = true ] && REASON="$REASON ÁªÑ‰ª∂Êñá‰ª∂"
              [ "$SCRIPTS_CHANGED" = true ] && REASON="$REASON ËÑöÊú¨Êñá‰ª∂"
              [ "$CONFIG_CHANGED" = true ] && REASON="$REASON ÈÖçÁΩÆÊñá‰ª∂"
              [ "$WORKFLOW_CHANGED" = true ] && REASON="$REASON Â∑•‰ΩúÊµÅÊñá‰ª∂"
              
              # Ê£ÄÊü•ÊòØÂê¶ÊúâÂåπÈÖçÁöÑÊñá‰ª∂
              if [ -n "$MATCHING_FILES" ]; then
                echo "üîç ÂåπÈÖçÂà∞ÈúÄË¶ÅÈáçÊñ∞ÊûÑÂª∫ÁöÑÊñá‰ª∂Á±ªÂûã: $MATCHING_FILES"
                echo "build-reason=$REASON" >> $GITHUB_OUTPUT
                echo "changed-files=$(echo "$CHANGED_FILES" | head -20 | sed ':a;N;$!ba;s/\n/, /g')" >> $GITHUB_OUTPUT
                BUILD_NEEDED=true
              else
                echo "‚ÑπÔ∏è  ÂèòÊõ¥ÁöÑÊñá‰ª∂‰∏çÂΩ±ÂìçÊûÑÂª∫"
                echo "build-reason=ÂèòÊõ¥ÁöÑÊñá‰ª∂‰∏çÂΩ±ÂìçÊûÑÂª∫" >> $GITHUB_OUTPUT
                echo "changed-files=$(echo "$CHANGED_FILES" | head -10 | sed ':a;N;$!ba;s/\n/, /g')" >> $GITHUB_OUTPUT
                BUILD_NEEDED=false
              fi
            fi
          fi

          echo "build-needed=$BUILD_NEEDED" >> $GITHUB_OUTPUT
          echo "ÊúÄÁªàÂÜ≥Á≠ñ: Build needed = $BUILD_NEEDED"

  build-and-deploy:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Parse README and generate data
        run: npm run parse-readme

      - name: Build website
        run: npm run build

      - name: Build Summary
        run: |
          echo "## üìã ÊûÑÂª∫ËØ¶ÊÉÖ" >> $GITHUB_STEP_SUMMARY
          echo "- **ÊûÑÂª∫ÂéüÂõ†**: ${{ needs.check-changes.outputs.build-reason }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ÂèòÊõ¥Êñá‰ª∂**: ${{ needs.check-changes.outputs.changed-files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ÊûÑÂª∫Êó∂Èó¥**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **NodeÁâàÊú¨**: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **NPMÁâàÊú¨**: $(npm --version)" >> $GITHUB_STEP_SUMMARY

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  skip-build:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip build notification
        run: |
          echo "## ‚è≠Ô∏è Ë∑≥ËøáÊûÑÂª∫" >> $GITHUB_STEP_SUMMARY
          echo "- **Ë∑≥ËøáÂéüÂõ†**: ${{ needs.check-changes.outputs.build-reason }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ÂèòÊõ¥Êñá‰ª∂**: ${{ needs.check-changes.outputs.changed-files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ê£ÄÊü•Êó∂Èó¥**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Ê£ÄÊµãÂà∞ÂèòÊõ¥ÁöÑÊñá‰ª∂‰∏çÂΩ±ÂìçÁΩëÁ´ôÊûÑÂª∫ÔºåË∑≥ËøáÊ≠§Ê¨°ÈÉ®ÁΩ≤"
