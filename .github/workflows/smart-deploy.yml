name: Smart Build and Deploy Website

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.build-needed }}
      build-reason: ${{ steps.check.outputs.build-reason }}
      changed-files: ${{ steps.check.outputs.changed-files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Get full history
          submodules: true

      - name: Check if build is needed
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Monitor README.md, yaal.config.yaml, and yaal submodule changes
          README_PATTERN="^README.md"
          CONFIG_PATTERN="^yaal.config.yaml"
          SUBMODULE_PATTERN="^yaal"

          # Use GitHub API to find last successful build-and-deploy commit
          echo "üîç Querying last successful build-and-deploy commit..."

          # Get last successful build-and-deploy workflow run
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/smart-deploy.yml/runs?status=success&per_page=1&branch=main")

          LAST_BUILD_SHA=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].head_sha // empty')

          if [ -z "$LAST_BUILD_SHA" ] || [ "$LAST_BUILD_SHA" = "null" ]; then
            echo "üöÄ First build - no previous successful build found"
            echo "build-reason=First build - no previous successful build found" >> $GITHUB_OUTPUT
            echo "changed-files=All files (first build)" >> $GITHUB_OUTPUT
            BUILD_NEEDED=true
          else
            echo "üìä Last successful build: $LAST_BUILD_SHA"
            
            # Get list of changed files
            CHANGED_FILES=$(git diff --name-only $LAST_BUILD_SHA HEAD)
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "‚úÖ No file changes"
              echo "build-reason=No file changes" >> $GITHUB_OUTPUT
              echo "changed-files=None" >> $GITHUB_OUTPUT
              BUILD_NEEDED=false
            else
              echo "üìÅ Detected changed files:"
              echo "$CHANGED_FILES" | while read -r file; do
                echo "  - $file"
              done
              
              # Check if README.md, yaal.config.yaml, or yaal submodule changed
              README_CHANGED=false
              CONFIG_CHANGED=false
              SUBMODULE_CHANGED=false
              while IFS= read -r file; do
                if echo "$file" | grep -qE "$README_PATTERN"; then
                  README_CHANGED=true
                fi
                if echo "$file" | grep -qE "$CONFIG_PATTERN"; then
                  CONFIG_CHANGED=true
                fi
                if echo "$file" | grep -qE "$SUBMODULE_PATTERN"; then
                  SUBMODULE_CHANGED=true
                fi
              done <<< "$CHANGED_FILES"
              
              # Build detailed reason
              REASON="Changes detected:"
              [ "$README_CHANGED" = true ] && REASON="$REASON README.md"
              [ "$CONFIG_CHANGED" = true ] && REASON="$REASON config file"
              [ "$SUBMODULE_CHANGED" = true ] && REASON="$REASON yaal submodule"
              
              if [ "$README_CHANGED" = true ] || [ "$CONFIG_CHANGED" = true ] || [ "$SUBMODULE_CHANGED" = true ]; then
                echo "üîç $REASON - rebuild needed"
                echo "build-reason=$REASON" >> $GITHUB_OUTPUT
                echo "changed-files=$(echo "$CHANGED_FILES" | head -20 | sed ':a;N;$!ba;s/\n/, /g')" >> $GITHUB_OUTPUT
                BUILD_NEEDED=true
              else
                echo "‚ÑπÔ∏è  No relevant changes - no rebuild needed"
                echo "build-reason=No relevant changes" >> $GITHUB_OUTPUT
                echo "changed-files=$(echo "$CHANGED_FILES" | head -10 | sed ':a;N;$!ba;s/\n/, /g')" >> $GITHUB_OUTPUT
                BUILD_NEEDED=false
              fi
            fi
          fi

          echo "build-needed=$BUILD_NEEDED" >> $GITHUB_OUTPUT
          echo "Final decision: Build needed = $BUILD_NEEDED"

  build-and-deploy:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: yaal/package-lock.json

      - name: Install dependencies
        working-directory: ./yaal
        run: npm ci

      - name: Generate configuration
        working-directory: ./yaal
        run: node scripts/generate-github-config.js

      - name: Parse README and generate data
        working-directory: ./yaal
        run: node scripts/parse-readme.js

      - name: Build website
        working-directory: ./yaal
        run: npm run build

      - name: Build Summary
        run: |
          echo "## üìã Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Reason**: ${{ needs.check-changes.outputs.build-reason }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changed Files**: ${{ needs.check-changes.outputs.changed-files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version**: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Version**: $(npm --version)" >> $GITHUB_STEP_SUMMARY

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./yaal/out

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  skip-build:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip build notification
        run: |
          echo "## ‚è≠Ô∏è Skip Build" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Reason**: ${{ needs.check-changes.outputs.build-reason }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changed Files**: ${{ needs.check-changes.outputs.changed-files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Check Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Detected changed files do not affect website build, skipping deployment"